{"name":"worktracker","version":"0.0.1","repository":{"type":"git","url":"user/repo"},"devDependencies":{"grunt":"0.4.5","grunt-autoprefixer":"3.0.0","grunt-concurrent":"1.0.0","grunt-contrib-clean":"0.6.0","grunt-contrib-coffee":"0.13.0","grunt-contrib-concat":"0.5.1","grunt-contrib-connect":"0.10.1","grunt-contrib-copy":"0.8.0","grunt-contrib-cssmin":"0.12.2","grunt-contrib-htmlmin":"0.4.0","grunt-contrib-jshint":"0.11.2","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-karma":"0.10.1","grunt-license-report":"0.0.8","grunt-ng-annotate":"0.10.0","grunt-open":"0.2.3","grunt-rev":"0.1.0","grunt-sass":"0.18.1","grunt-usemin":"3.0.0","jasmine-core":"2.2.0","karma":"0.12.31","karma-chrome-launcher":"0.1.8","karma-coverage":"0.3.1","karma-jasmine":"0.3.5","karma-junit-reporter":"^0.2.2","karma-ng-scenario":"0.1.0","karma-phantomjs-launcher":"0.1.4","load-grunt-configs":"0.4.3","load-grunt-tasks":"3.1.0","lodash":"3.8.0","time-grunt":"1.1.1","grunt-connect-proxy":"0.1.10","json-server":"0.6.10","promise":"^7.0.1","plist":"^1.1.0","grunt-contrib-compress":"^0.13.0","grunt-http-upload":"^0.1.8","grunt-replace":"^0.9.2","nodewebkit":"0.11.6","chrome-remote-interface":"0.9.0","grunt-node-webkit-builder":"1.0.2","node-webkit-builder":"1.0.11"},"engines":{"node":">=0.10.0","npm":">=1.4.5"},"scripts":{"test":"grunt test","start":"nodewebkit ./dist/web"}}
package com.hmkcode;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.hmkcode.vo.Article;


public class App 
{
    public static void main( String[] args )
    {

    	ObjectMapper mapper = new ObjectMapper(); 

    	try {
    			
    		//POJO to JSON
			mapper.writeValue(new File("article.json"), createArticle());
			System.out.println("json created!");

			//JSON to POJO
			Article article = mapper.readValue(new File("article.json"), Article.class);

			//"Raw" Data Binding Example
			Map<String,Object> articleMap = mapper.readValue(new File("article.json"), Map.class);

			System.out.println(article);

			System.out.println(articleMap);

			//Data binding Collection<E>
			List<Article> articles = new LinkedList<Article>();

			articles.add(createArticle());
			articles.add(createArticle());

			mapper.writeValue(new File("articles.json"), articles);
			
			//( 1 ) Collection<Map>
			List result = mapper.readValue(new File("articles.json"), List.class);
			System.out.println(result.get(0).getClass());
			System.out.println(result);

			//( 2 ) Collection<Artilce>
			result = mapper.readValue(new File("articles.json"), new TypeReference<List<Article>>() { });
			System.out.println(result.get(0).getClass());
			System.out.println(result);
			
			System.out.println("---------------------------------------------------------");
			//Tree
			ObjectNode objectRoot = (ObjectNode) mapper.readTree(new File("article.json"));
			Iterator<String> fields = objectRoot.fieldNames();
			String field = "";
			while(fields.hasNext()){
				field = fields.next();
				System.out.println("field: "+field);
			}
			System.out.println("---------------------------------------------------------");

			ArrayNode arrayRoot = (ArrayNode) mapper.readTree(new File("articles.json"));

			Iterator<JsonNode> elements = arrayRoot.elements();
			JsonNode element;

			while(elements.hasNext()){
				element = elements.next();				
				fields = element.fieldNames();
				field = "";
				while(fields.hasNext()){
					field = fields.next();
					System.out.println("field: "+field);
				}

			}

    	} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }

    private static Article createArticle(){

    	Article article = new Article();

    	article.setTitle("Jackson - Java to JSON & JSON to Java");
    	article.setUrl("http://hmkcode.com/jackson-java-json");
    	article.addCategory("Java");
    	article.addTag("Java");
    	article.addTag("Jackson");
    	article.addTag("JSON");

    	return article;
    }
}